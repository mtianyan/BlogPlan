创建blog.views
每个响应对应一个函数，函数必须返回一个响应
函数必须存在一个参数，一般约定为request
每一个响应函数对应一个url函数

编辑urls.py
每个url都以url的形式写出来
url函数放在urlpatterns列表中
url函数三个参数，url正则，对应的方法，名称

包含其他url

在根urls.py引入include
在app目录下创建urls.py，格式与根urls.py相同
根urls.py中url函数第二个参数改为include('blog.urls')
主要事项
urls.py针对app blog的总路径

注意正则表达式中/

templates
html文件

使用django模板语言：
可以改用jinjia2等
1.步骤在app根目录创建templates目录
2.在templates创建html文件
3.在views.py中返回render

模板语言DTL初步使用
render()函数的第三个参数支持传入一个dict类型的参数u
该字典是后台传递到模板的参数，键为参数名

在模板中使用{{参数名}}来直接使用

注意事项：
django查找template
按照installed_apps中的添加顺序查找templates
不同app下templates目录中的同名文件会造成冲突

解决Templates的冲突方案
在app的templates目录下创建以app名为名称的目录
将html文件放入新创建的目录下

models模型：
通常一个model对应数据库的一张数据表
django中models以类的方式表现
它包含一些基本的字段以及数据的一些行为
对于类进行操作不用写sql语句


ORM
对象关系映射(object Relation mapping)
实现了对象与数据库之间的映射
隐藏了数据访问的细节，不需要编写sql语句


步骤：
	应用目录下创建models.py,并引入models模块

	创建类继承models.Model，该类就是一张数据表

	在类中创建字段

字段创建：
	字段就是类中的属性(变量)
	attr = models.CharField(max_length = 64)


步骤：
生成数据表
命令行计入manage.py同级目录
执行python manage.py makemigrations app名(可选)
再执行python manage.py migrate


没有添加主键所有自动生成id


生成数据表：
查看：
django会自动在app/migrations目录下生成移植文件
执行python manage.py sqlmigrate 应用名 文件id 查看sql语句
默认sqllite3的数据库会在根目录下的db.sqlite3

查看并编辑db.sqlite3
	使用第三方软件
	Sqlite Expert Personal

后台步骤：
views.py中import models
article = models.Article.objects.get(pk=1)
render(request,page,{'article':article})

页面呈现数据
前端步骤
模板可直接使用对象以及对象的"."操作
{{article.title}}

什么是admin
admin是django自带的一个功能强大的自动化数据管理页面
被授权的用户可以在admin中直接管理数据库
django提供了许多针对admin的定制功能

配置admin

创建用户
python manage.py createsuperuser 创建超级用户 django的安全密码不得8位以下
修改入口
localhost:8000/admin/ Admin入口
修改setting.py中的LANGUAGE_CODE ='zh_Hans'

配置应用：
在应用admin.py中引入自身的models模块(或里面的模型类)
编辑admin.py admin.site.register(models.Article)

修改数据默认显示名称
步骤：
在Article类下添加一个方法：
根据python版本不同选择__str__(self)和__unicode_(self)
return self.title

完善博客：
博客页面设计：
页面概要：
1：博客的主页面：
2：博客的文章内容页面：
3：博客的编辑页面

博客主页面：
内容：
	文章标题列表.超链接
	发表文章，超链接
列表编写思路：
	取出数据库中所有文章对象：
	将文章对象们打包成列表，传递到前端
	前端页面把文章以标题超链接的形式逐个列出
	render 的 for循环

模板for循环
{% for xx in xxs %}
html语句
{% endfor %}

注意：展示数据：{{}}{% %}

博客文章页面：
页面内容：
标题
文章内容
修改文章按钮(超链接)


Url传递参数

参数写在响应函数中的requests后，可以有默认值
url正则表达式 r'^article/(?P<article_id>[0-9]+)$
url正则中组名与响应时参数名保持一致


django的超链接


超链接目标地址：
href 后面是目标地址
template中可以用:"{% url 'app_name:url_name' param%}"
命名空间app_name url_name链接名

appname在
总目录下的urls中，写在include（）的第二个参数位置，namespace = 'blog' 
urlname在应用下的urls的第三个参数位置，name = 'artile_page

是否使用了另一个include

博客编写页面
页面内容：
标题编辑栏
文章内容编辑区域
提交按钮

编辑响应或是那户

使用request.POST['参数名'] 获取表单数据
models.Article.objects.create(title,content)创建对象


两个编辑页面：
思路：
新文章为空，修改文章有内容

修改文章页面有文章对象
文章的ID

django补充内容：
templates过滤器
1：什么是过滤器？
写在模板中，属于django模板语言
可以修改模板中的变量，从而显示不同的内容

sorted len

使用过滤器：
{{value | filter}}
{{ list_nums | length }}
{{ value | filter1 | filter1 |...}}

2：django shell

python的交互式命令行环境
与项目交互

python manage.py shell

from blog.models import Article

Article.objects.all()
获取真实数据库
1:可以使用shell进行调试工作
2：测试未知方法
3：admin

要想让后台拥有更多显示
除过标题还有内容

先要创建admin配置类
class ArticleAdmin(admin.ModelAdmin)
注册： admin.site.register(Article,ArticleAdmin)
将article与该配置类绑定


显示其他字段

过滤器

list_filter ={}

课程总结：

